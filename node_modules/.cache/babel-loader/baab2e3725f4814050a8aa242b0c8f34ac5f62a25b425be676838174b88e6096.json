{"ast":null,"code":"export const calculateLoan = input => {\n  // 计算最大贷款金额\n  const maxLoanAmount = calculateMaxLoanAmount(input);\n\n  // 计算最长贷款期限\n  const maxLoanTerm = calculateMaxLoanTerm(input);\n\n  // 计算月供\n  const monthlyPayment = calculateMonthlyPayment(maxLoanAmount, maxLoanTerm);\n\n  // 计算相关费用\n  const fees = calculateFees(input);\n  return {\n    maxLoanAmount,\n    maxLoanTerm,\n    monthlyPayment,\n    fees\n  };\n};\nconst calculateMaxLoanAmount = input => {\n  const {\n    userType,\n    propertyValue,\n    monthlyIncome,\n    existingDebt,\n    propertyType\n  } = input;\n\n  // 根据外籍人士抵押贷款专项计算手册确定最高 LTV\n  let maxLoanToValue;\n\n  // 外籍人士适用规则\n  if (userType === 'expat') {\n    if (propertyType === 'first') {\n      // 首套住宅，根据房产价值确定 LTV\n      if (propertyValue <= 5000000) {\n        maxLoanToValue = 0.80; // 首套 ≤500万AED：80%\n      } else {\n        maxLoanToValue = 0.70; // 首套 >500万AED：70%\n      }\n    } else if (propertyType === 'second') {\n      maxLoanToValue = 0.60; // 投资房产（第二套）：60%\n    } else if (propertyType === 'offPlan') {\n      maxLoanToValue = 0.50; // 期房：50%\n    } else {\n      maxLoanToValue = 0.70; // 默认情况\n    }\n  } else {\n    // 本地居民适用规则（保留原来的逻辑，但实际应该根据文档更新）\n    maxLoanToValue = 0.80;\n  }\n\n  // 月供不超过月收入的50%\n  const maxMonthlyPayment = monthlyIncome * 0.5 - existingDebt;\n\n  // 根据月供计算最大贷款金额，使用计算得出的贷款期限\n  const calculatedTerm = calculateMaxLoanTerm(input);\n  const maxLoanByIncome = maxMonthlyPayment * 12 * calculatedTerm;\n\n  // 取较小值\n  return Math.min(propertyValue * maxLoanToValue, maxLoanByIncome);\n};\nconst calculateMaxLoanTerm = input => {\n  const {\n    userType,\n    propertyType,\n    age\n  } = input;\n\n  // 本地居民最长到70岁，外籍人士最长到65岁\n  const maxAge = userType === 'local' ? 70 : 65;\n\n  // 计算基于年龄的最大贷款期限\n  const maxTermByAge = Math.max(0, maxAge - age);\n\n  // 原有逻辑：本地居民最长25年，外籍人士最长20年\n  const baseTerm = userType === 'local' ? 25 : 20;\n\n  // 根据房产类型调整期限\n  let adjustedTerm;\n  switch (propertyType) {\n    case 'first':\n      adjustedTerm = baseTerm;\n      break;\n    case 'second':\n      adjustedTerm = baseTerm - 5;\n      break;\n    case 'offPlan':\n      adjustedTerm = baseTerm - 2;\n      break;\n    default:\n      adjustedTerm = baseTerm;\n  }\n\n  // 取两者中的较小值\n  return Math.min(adjustedTerm, maxTermByAge);\n};\nconst calculateMonthlyPayment = (loanAmount, loanTerm) => {\n  // 贷款期限为0时，月供设为0\n  if (loanTerm <= 0) return 0;\n\n  // 假设年利率为4%\n  const annualRate = 0.04;\n  const monthlyRate = annualRate / 12;\n  const numberOfPayments = loanTerm * 12;\n  return loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n};\nconst calculateFees = input => {\n  const {\n    propertyValue,\n    loanType\n  } = input;\n\n  // 评估费：房产价值的0.5%\n  const evaluation = propertyValue * 0.005;\n\n  // 登记费：房产价值的0.5%\n  const registration = propertyValue * 0.005;\n\n  // 转让费：根据贷款类型不同\n  let transfer = 0;\n  switch (loanType) {\n    case 'new':\n      transfer = propertyValue * 0.02; // 2%\n      break;\n    case 'refinance':\n      transfer = propertyValue * 0.01; // 1%\n      break;\n    case 'cashout':\n      transfer = propertyValue * 0.015; // 1.5%\n      break;\n    case 'combined':\n      transfer = propertyValue * 0.025; // 2.5%\n      break;\n  }\n  return {\n    evaluation,\n    registration,\n    transfer\n  };\n};","map":{"version":3,"names":["calculateLoan","input","maxLoanAmount","calculateMaxLoanAmount","maxLoanTerm","calculateMaxLoanTerm","monthlyPayment","calculateMonthlyPayment","fees","calculateFees","userType","propertyValue","monthlyIncome","existingDebt","propertyType","maxLoanToValue","maxMonthlyPayment","calculatedTerm","maxLoanByIncome","Math","min","age","maxAge","maxTermByAge","max","baseTerm","adjustedTerm","loanAmount","loanTerm","annualRate","monthlyRate","numberOfPayments","pow","loanType","evaluation","registration","transfer"],"sources":["E:/Loan/LoanCalculatorV2/src/utils/loanCalculator.ts"],"sourcesContent":["export interface LoanInput {\r\n  userType: 'local' | 'expat';\r\n  propertyValue: number;\r\n  propertyType: 'first' | 'second' | 'offPlan';\r\n  monthlyIncome: number;\r\n  existingDebt: number;\r\n  loanType: 'new' | 'refinance' | 'cashout' | 'combined';\r\n  age: number;\r\n}\r\n\r\nexport interface LoanResult {\r\n  maxLoanAmount: number;\r\n  maxLoanTerm: number;\r\n  monthlyPayment: number;\r\n  fees: {\r\n    evaluation: number;\r\n    registration: number;\r\n    transfer: number;\r\n  };\r\n}\r\n\r\nexport const calculateLoan = (input: LoanInput): LoanResult => {\r\n  // 计算最大贷款金额\r\n  const maxLoanAmount = calculateMaxLoanAmount(input);\r\n  \r\n  // 计算最长贷款期限\r\n  const maxLoanTerm = calculateMaxLoanTerm(input);\r\n  \r\n  // 计算月供\r\n  const monthlyPayment = calculateMonthlyPayment(maxLoanAmount, maxLoanTerm);\r\n  \r\n  // 计算相关费用\r\n  const fees = calculateFees(input);\r\n\r\n  return {\r\n    maxLoanAmount,\r\n    maxLoanTerm,\r\n    monthlyPayment,\r\n    fees,\r\n  };\r\n};\r\n\r\nconst calculateMaxLoanAmount = (input: LoanInput): number => {\r\n  const { userType, propertyValue, monthlyIncome, existingDebt, propertyType } = input;\r\n  \r\n  // 根据外籍人士抵押贷款专项计算手册确定最高 LTV\r\n  let maxLoanToValue;\r\n  \r\n  // 外籍人士适用规则\r\n  if (userType === 'expat') {\r\n    if (propertyType === 'first') {\r\n      // 首套住宅，根据房产价值确定 LTV\r\n      if (propertyValue <= 5000000) {\r\n        maxLoanToValue = 0.80; // 首套 ≤500万AED：80%\r\n      } else {\r\n        maxLoanToValue = 0.70; // 首套 >500万AED：70%\r\n      }\r\n    } else if (propertyType === 'second') {\r\n      maxLoanToValue = 0.60; // 投资房产（第二套）：60%\r\n    } else if (propertyType === 'offPlan') {\r\n      maxLoanToValue = 0.50; // 期房：50%\r\n    } else {\r\n      maxLoanToValue = 0.70; // 默认情况\r\n    }\r\n  } else {\r\n    // 本地居民适用规则（保留原来的逻辑，但实际应该根据文档更新）\r\n    maxLoanToValue = 0.80;\r\n  }\r\n  \r\n  // 月供不超过月收入的50%\r\n  const maxMonthlyPayment = monthlyIncome * 0.5 - existingDebt;\r\n  \r\n  // 根据月供计算最大贷款金额，使用计算得出的贷款期限\r\n  const calculatedTerm = calculateMaxLoanTerm(input);\r\n  const maxLoanByIncome = maxMonthlyPayment * 12 * calculatedTerm;\r\n  \r\n  // 取较小值\r\n  return Math.min(propertyValue * maxLoanToValue, maxLoanByIncome);\r\n};\r\n\r\nconst calculateMaxLoanTerm = (input: LoanInput): number => {\r\n  const { userType, propertyType, age } = input;\r\n  \r\n  // 本地居民最长到70岁，外籍人士最长到65岁\r\n  const maxAge = userType === 'local' ? 70 : 65;\r\n  \r\n  // 计算基于年龄的最大贷款期限\r\n  const maxTermByAge = Math.max(0, maxAge - age);\r\n  \r\n  // 原有逻辑：本地居民最长25年，外籍人士最长20年\r\n  const baseTerm = userType === 'local' ? 25 : 20;\r\n  \r\n  // 根据房产类型调整期限\r\n  let adjustedTerm;\r\n  switch (propertyType) {\r\n    case 'first':\r\n      adjustedTerm = baseTerm;\r\n      break;\r\n    case 'second':\r\n      adjustedTerm = baseTerm - 5;\r\n      break;\r\n    case 'offPlan':\r\n      adjustedTerm = baseTerm - 2;\r\n      break;\r\n    default:\r\n      adjustedTerm = baseTerm;\r\n  }\r\n  \r\n  // 取两者中的较小值\r\n  return Math.min(adjustedTerm, maxTermByAge);\r\n};\r\n\r\nconst calculateMonthlyPayment = (loanAmount: number, loanTerm: number): number => {\r\n  // 贷款期限为0时，月供设为0\r\n  if (loanTerm <= 0) return 0;\r\n  \r\n  // 假设年利率为4%\r\n  const annualRate = 0.04;\r\n  const monthlyRate = annualRate / 12;\r\n  const numberOfPayments = loanTerm * 12;\r\n  \r\n  return (\r\n    (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) /\r\n    (Math.pow(1 + monthlyRate, numberOfPayments) - 1)\r\n  );\r\n};\r\n\r\nconst calculateFees = (input: LoanInput) => {\r\n  const { propertyValue, loanType } = input;\r\n  \r\n  // 评估费：房产价值的0.5%\r\n  const evaluation = propertyValue * 0.005;\r\n  \r\n  // 登记费：房产价值的0.5%\r\n  const registration = propertyValue * 0.005;\r\n  \r\n  // 转让费：根据贷款类型不同\r\n  let transfer = 0;\r\n  switch (loanType) {\r\n    case 'new':\r\n      transfer = propertyValue * 0.02; // 2%\r\n      break;\r\n    case 'refinance':\r\n      transfer = propertyValue * 0.01; // 1%\r\n      break;\r\n    case 'cashout':\r\n      transfer = propertyValue * 0.015; // 1.5%\r\n      break;\r\n    case 'combined':\r\n      transfer = propertyValue * 0.025; // 2.5%\r\n      break;\r\n  }\r\n  \r\n  return {\r\n    evaluation,\r\n    registration,\r\n    transfer,\r\n  };\r\n}; "],"mappings":"AAqBA,OAAO,MAAMA,aAAa,GAAIC,KAAgB,IAAiB;EAC7D;EACA,MAAMC,aAAa,GAAGC,sBAAsB,CAACF,KAAK,CAAC;;EAEnD;EACA,MAAMG,WAAW,GAAGC,oBAAoB,CAACJ,KAAK,CAAC;;EAE/C;EACA,MAAMK,cAAc,GAAGC,uBAAuB,CAACL,aAAa,EAAEE,WAAW,CAAC;;EAE1E;EACA,MAAMI,IAAI,GAAGC,aAAa,CAACR,KAAK,CAAC;EAEjC,OAAO;IACLC,aAAa;IACbE,WAAW;IACXE,cAAc;IACdE;EACF,CAAC;AACH,CAAC;AAED,MAAML,sBAAsB,GAAIF,KAAgB,IAAa;EAC3D,MAAM;IAAES,QAAQ;IAAEC,aAAa;IAAEC,aAAa;IAAEC,YAAY;IAAEC;EAAa,CAAC,GAAGb,KAAK;;EAEpF;EACA,IAAIc,cAAc;;EAElB;EACA,IAAIL,QAAQ,KAAK,OAAO,EAAE;IACxB,IAAII,YAAY,KAAK,OAAO,EAAE;MAC5B;MACA,IAAIH,aAAa,IAAI,OAAO,EAAE;QAC5BI,cAAc,GAAG,IAAI,CAAC,CAAC;MACzB,CAAC,MAAM;QACLA,cAAc,GAAG,IAAI,CAAC,CAAC;MACzB;IACF,CAAC,MAAM,IAAID,YAAY,KAAK,QAAQ,EAAE;MACpCC,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM,IAAID,YAAY,KAAK,SAAS,EAAE;MACrCC,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM;MACLA,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB;EACF,CAAC,MAAM;IACL;IACAA,cAAc,GAAG,IAAI;EACvB;;EAEA;EACA,MAAMC,iBAAiB,GAAGJ,aAAa,GAAG,GAAG,GAAGC,YAAY;;EAE5D;EACA,MAAMI,cAAc,GAAGZ,oBAAoB,CAACJ,KAAK,CAAC;EAClD,MAAMiB,eAAe,GAAGF,iBAAiB,GAAG,EAAE,GAAGC,cAAc;;EAE/D;EACA,OAAOE,IAAI,CAACC,GAAG,CAACT,aAAa,GAAGI,cAAc,EAAEG,eAAe,CAAC;AAClE,CAAC;AAED,MAAMb,oBAAoB,GAAIJ,KAAgB,IAAa;EACzD,MAAM;IAAES,QAAQ;IAAEI,YAAY;IAAEO;EAAI,CAAC,GAAGpB,KAAK;;EAE7C;EACA,MAAMqB,MAAM,GAAGZ,QAAQ,KAAK,OAAO,GAAG,EAAE,GAAG,EAAE;;EAE7C;EACA,MAAMa,YAAY,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAGD,GAAG,CAAC;;EAE9C;EACA,MAAMI,QAAQ,GAAGf,QAAQ,KAAK,OAAO,GAAG,EAAE,GAAG,EAAE;;EAE/C;EACA,IAAIgB,YAAY;EAChB,QAAQZ,YAAY;IAClB,KAAK,OAAO;MACVY,YAAY,GAAGD,QAAQ;MACvB;IACF,KAAK,QAAQ;MACXC,YAAY,GAAGD,QAAQ,GAAG,CAAC;MAC3B;IACF,KAAK,SAAS;MACZC,YAAY,GAAGD,QAAQ,GAAG,CAAC;MAC3B;IACF;MACEC,YAAY,GAAGD,QAAQ;EAC3B;;EAEA;EACA,OAAON,IAAI,CAACC,GAAG,CAACM,YAAY,EAAEH,YAAY,CAAC;AAC7C,CAAC;AAED,MAAMhB,uBAAuB,GAAGA,CAACoB,UAAkB,EAAEC,QAAgB,KAAa;EAChF;EACA,IAAIA,QAAQ,IAAI,CAAC,EAAE,OAAO,CAAC;;EAE3B;EACA,MAAMC,UAAU,GAAG,IAAI;EACvB,MAAMC,WAAW,GAAGD,UAAU,GAAG,EAAE;EACnC,MAAME,gBAAgB,GAAGH,QAAQ,GAAG,EAAE;EAEtC,OACGD,UAAU,GAAGG,WAAW,GAAGX,IAAI,CAACa,GAAG,CAAC,CAAC,GAAGF,WAAW,EAAEC,gBAAgB,CAAC,IACtEZ,IAAI,CAACa,GAAG,CAAC,CAAC,GAAGF,WAAW,EAAEC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAErD,CAAC;AAED,MAAMtB,aAAa,GAAIR,KAAgB,IAAK;EAC1C,MAAM;IAAEU,aAAa;IAAEsB;EAAS,CAAC,GAAGhC,KAAK;;EAEzC;EACA,MAAMiC,UAAU,GAAGvB,aAAa,GAAG,KAAK;;EAExC;EACA,MAAMwB,YAAY,GAAGxB,aAAa,GAAG,KAAK;;EAE1C;EACA,IAAIyB,QAAQ,GAAG,CAAC;EAChB,QAAQH,QAAQ;IACd,KAAK,KAAK;MACRG,QAAQ,GAAGzB,aAAa,GAAG,IAAI,CAAC,CAAC;MACjC;IACF,KAAK,WAAW;MACdyB,QAAQ,GAAGzB,aAAa,GAAG,IAAI,CAAC,CAAC;MACjC;IACF,KAAK,SAAS;MACZyB,QAAQ,GAAGzB,aAAa,GAAG,KAAK,CAAC,CAAC;MAClC;IACF,KAAK,UAAU;MACbyB,QAAQ,GAAGzB,aAAa,GAAG,KAAK,CAAC,CAAC;MAClC;EACJ;EAEA,OAAO;IACLuB,UAAU;IACVC,YAAY;IACZC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}