{"ast":null,"code":"export const calculateLoan = input => {\n  // 计算总月债务（现有贷款 + 信用卡最低还款）\n  const totalMonthlyDebt = calculateTotalMonthlyDebt(input);\n\n  // 计算最大贷款金额\n  const maxLoanAmount = calculateMaxLoanAmount(input, totalMonthlyDebt);\n\n  // 计算最长贷款期限\n  const maxLoanTerm = calculateMaxLoanTerm(input);\n\n  // 计算月供\n  const monthlyPayment = calculateMonthlyPayment(maxLoanAmount, maxLoanTerm);\n\n  // 计算相关费用\n  const fees = calculateFees(input, maxLoanAmount);\n\n  // 基础结果\n  const result = {\n    maxLoanAmount,\n    maxLoanTerm,\n    monthlyPayment,\n    totalMonthlyDebt,\n    fees\n  };\n\n  // 如果是转贷类型，添加转贷分析\n  if (input.loanType === 'refinance' && input.existingLoanBalance) {\n    result.refinanceAnalysis = calculateRefinanceAnalysis(input, maxLoanAmount, maxLoanTerm, fees);\n  }\n  return result;\n};\n\n// 计算总月债务\nconst calculateTotalMonthlyDebt = input => {\n  const {\n    existingLoanPayment,\n    creditCardLimit\n  } = input;\n\n  // 信用卡额度的5%折算为最低月还款额\n  const creditCardMinPayment = creditCardLimit * 0.05;\n\n  // 总月债务 = 现有贷款月还款额 + 信用卡最低还款额\n  return existingLoanPayment + creditCardMinPayment;\n};\nconst calculateMaxLoanAmount = (input, totalMonthlyDebt) => {\n  const {\n    userType,\n    propertyValue,\n    monthlyIncome,\n    propertyType,\n    loanType,\n    existingLoanBalance,\n    desiredCashout\n  } = input;\n\n  // 根据外籍人士抵押贷款专项计算手册确定最高 LTV\n  let maxLoanToValue;\n\n  // 外籍人士适用规则\n  if (userType === 'expat') {\n    if (propertyType === 'first') {\n      // 首套住宅，根据房产价值确定 LTV\n      if (propertyValue <= 5000000) {\n        maxLoanToValue = 0.80; // 首套 ≤500万AED：80%\n      } else {\n        maxLoanToValue = 0.70; // 首套 >500万AED：70%\n      }\n    } else if (propertyType === 'second') {\n      maxLoanToValue = 0.60; // 投资房产（第二套）：60%\n    } else if (propertyType === 'offPlan') {\n      maxLoanToValue = 0.50; // 期房：50%\n    } else {\n      maxLoanToValue = 0.70; // 默认情况\n    }\n  } else {\n    // 本地居民适用规则（保留原来的逻辑，但实际应该根据文档更新）\n    maxLoanToValue = 0.80;\n  }\n\n  // 月供不超过月收入的50%\n  const maxMonthlyPayment = monthlyIncome * 0.5 - totalMonthlyDebt;\n\n  // 根据月供计算最大贷款金额，使用计算得出的贷款期限\n  const calculatedTerm = calculateMaxLoanTerm(input);\n  const maxLoanByIncome = maxMonthlyPayment * 12 * calculatedTerm;\n\n  // 基于LTV的贷款额度上限\n  const maxLoanByLTV = propertyValue * maxLoanToValue;\n\n  // 针对转贷计算\n  if (loanType === 'refinance' && existingLoanBalance) {\n    // 如果是转贷，需要确保新贷款金额至少覆盖现有贷款余额\n    // 公式：新贷款额 = Min(现有贷款余额 + 套现金额, 评估价值 × 适用LTV)\n    const desiredAmount = existingLoanBalance + (desiredCashout || 0);\n    return Math.min(desiredAmount, maxLoanByLTV, maxLoanByIncome);\n  }\n\n  // 取较小值\n  return Math.min(maxLoanByLTV, maxLoanByIncome);\n};\nconst calculateMaxLoanTerm = input => {\n  const {\n    userType,\n    propertyType,\n    age\n  } = input;\n\n  // 按照文档规定，贷款到期时不得超过65周岁\n  const maxAge = userType === 'expat' ? 65 : 70; // 外籍人士最长到65岁，本地居民到70岁\n\n  // 计算基于年龄的最大贷款期限\n  const maxTermByAge = Math.max(0, maxAge - age);\n\n  // 按照文档规定，最长贷款期限为25年\n  const maxDocTerm = 25;\n\n  // 取较小值，确保不超过文档中规定的最长期限\n  return Math.min(maxDocTerm, maxTermByAge);\n};\nconst calculateMonthlyPayment = (loanAmount, loanTerm, interestRate) => {\n  // 贷款期限为0时，月供设为0\n  if (loanTerm <= 0 || loanAmount <= 0) return 0;\n\n  // 基准利率\n  const baseRate = interestRate || 0.035; // 3.5%或传入的特定利率\n\n  // 压力测试标准：基准利率 + 2%（仅在未指定利率时使用压力测试）\n  const rate = interestRate ? baseRate : baseRate + 0.02; // 压力测试利率为5.5%\n\n  const monthlyRate = rate / 12;\n  const numberOfPayments = loanTerm * 12;\n\n  // 使用等额本息公式计算月供\n  return loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n};\n\n// 计算转贷分析结果\nconst calculateRefinanceAnalysis = (input, newLoanAmount, newLoanTerm, fees) => {\n  if (!input.existingLoanBalance || !input.existingLoanRate || !input.existingLoanTerm) {\n    return null;\n  }\n  const {\n    existingLoanBalance,\n    existingLoanRate,\n    existingLoanTerm,\n    desiredCashout = 0,\n    newLoanRate = 0.045\n  } = input;\n\n  // 计算可套现金额\n  const cashoutAmount = Math.max(0, newLoanAmount - existingLoanBalance);\n\n  // 计算当前月供\n  const currentMonthlyPayment = calculateMonthlyPayment(existingLoanBalance, existingLoanTerm, existingLoanRate);\n\n  // 计算新贷款月供（使用用户指定的新贷款利率）\n  const newMonthlyPayment = calculateMonthlyPayment(newLoanAmount, newLoanTerm, newLoanRate);\n\n  // 月供节省\n  const monthlySavings = currentMonthlyPayment - newMonthlyPayment;\n\n  // 总节省（按照新贷款期限计算）\n  const totalSavings = monthlySavings * newLoanTerm * 12;\n\n  // 总费用 - 使用类型安全的方式计算总费用\n  let totalFees = 0;\n  Object.keys(fees).forEach(key => {\n    const fee = fees[key];\n    if (typeof fee === 'number') {\n      totalFees += fee;\n    }\n  });\n\n  // 净收益\n  const netBenefit = totalSavings - totalFees;\n\n  // 收支平衡点（月数）\n  const breakEvenMonths = totalFees / monthlySavings;\n  return {\n    cashoutAmount,\n    monthlySavings,\n    totalSavings,\n    netBenefit,\n    breakEvenMonths: Math.ceil(breakEvenMonths)\n  };\n};\nconst calculateFees = (input, loanAmount) => {\n  const {\n    propertyValue,\n    loanType,\n    existingLoanBalance\n  } = input;\n\n  // 根据文档的费用明细规范计算费用\n\n  // 房产评估费：固定2,500-3,000 AED\n  const evaluation = 3000;\n\n  // 抵押登记费：贷款额×0.25% + 290 AED\n  const registration = loanAmount * 0.0025 + 290;\n\n  // 银行手续费：贷款额×1%（封顶10,000 AED）\n  let bankFee = loanAmount * 0.01;\n  bankFee = Math.min(bankFee, 10000);\n\n  // 基础费用对象\n  const fees = {\n    evaluation,\n    registration,\n    bankFee\n  };\n\n  // 根据贷款类型计算不同的费用\n  if (loanType === 'new') {\n    // 新购买：转让费为房产价值的2%\n    fees.transfer = propertyValue * 0.02;\n  } else if (loanType === 'refinance' && existingLoanBalance) {\n    // 转贷：转让费为房产价值的1%\n    fees.transfer = propertyValue * 0.01;\n\n    // 提前还款费：现有贷款余额的1%（封顶10,000 AED）\n    fees.earlyRepayment = Math.min(existingLoanBalance * 0.01, 10000);\n\n    // DLD抵押解除费：固定1,300-1,600 AED\n    fees.mortgageDischarge = 1500;\n  } else if (loanType === 'cashout') {\n    // 套现：转让费为房产价值的1.5%\n    fees.transfer = propertyValue * 0.015;\n  } else if (loanType === 'combined') {\n    // 组合贷款：转让费为房产价值的2.5%\n    fees.transfer = propertyValue * 0.025;\n  }\n  return fees;\n};","map":{"version":3,"names":["calculateLoan","input","totalMonthlyDebt","calculateTotalMonthlyDebt","maxLoanAmount","calculateMaxLoanAmount","maxLoanTerm","calculateMaxLoanTerm","monthlyPayment","calculateMonthlyPayment","fees","calculateFees","result","loanType","existingLoanBalance","refinanceAnalysis","calculateRefinanceAnalysis","existingLoanPayment","creditCardLimit","creditCardMinPayment","userType","propertyValue","monthlyIncome","propertyType","desiredCashout","maxLoanToValue","maxMonthlyPayment","calculatedTerm","maxLoanByIncome","maxLoanByLTV","desiredAmount","Math","min","age","maxAge","maxTermByAge","max","maxDocTerm","loanAmount","loanTerm","interestRate","baseRate","rate","monthlyRate","numberOfPayments","pow","newLoanAmount","newLoanTerm","existingLoanRate","existingLoanTerm","newLoanRate","cashoutAmount","currentMonthlyPayment","newMonthlyPayment","monthlySavings","totalSavings","totalFees","Object","keys","forEach","key","fee","netBenefit","breakEvenMonths","ceil","evaluation","registration","bankFee","transfer","earlyRepayment","mortgageDischarge"],"sources":["E:/Loan/LoanCalculatorV2/src/utils/loanCalculator.ts"],"sourcesContent":["export interface LoanInput {\r\n  userType: 'local' | 'expat';\r\n  propertyValue: number;\r\n  propertyType: 'first' | 'second' | 'offPlan';\r\n  monthlyIncome: number;\r\n  existingLoanPayment: number; // 现有贷款月还款额\r\n  creditCardLimit: number; // 信用卡额度\r\n  loanType: 'new' | 'refinance' | 'cashout' | 'combined';\r\n  age: number;\r\n  // 添加转贷相关字段\r\n  existingLoanBalance?: number; // 现有贷款余额\r\n  existingLoanRate?: number; // 现有贷款利率\r\n  existingLoanTerm?: number; // 现有贷款剩余期限\r\n  desiredCashout?: number; // 希望套现金额\r\n  newLoanRate?: number; // 新贷款利率\r\n}\r\n\r\nexport interface LoanResult {\r\n  maxLoanAmount: number;\r\n  maxLoanTerm: number;\r\n  monthlyPayment: number;\r\n  totalMonthlyDebt: number; // 总月债务\r\n  fees: {\r\n    evaluation: number;\r\n    registration: number;\r\n    transfer: number;\r\n    bankFee: number;\r\n    earlyRepayment?: number; // 提前还款费\r\n    mortgageDischarge?: number; // 抵押解除费\r\n  };\r\n  // 转贷相关结果\r\n  refinanceAnalysis?: {\r\n    cashoutAmount: number; // 可套现金额\r\n    monthlySavings: number; // 月供节省\r\n    totalSavings: number; // 总节省金额\r\n    netBenefit: number; // 净收益\r\n    breakEvenMonths: number; // 收支平衡月数\r\n  };\r\n}\r\n\r\nexport const calculateLoan = (input: LoanInput): LoanResult => {\r\n  // 计算总月债务（现有贷款 + 信用卡最低还款）\r\n  const totalMonthlyDebt = calculateTotalMonthlyDebt(input);\r\n  \r\n  // 计算最大贷款金额\r\n  const maxLoanAmount = calculateMaxLoanAmount(input, totalMonthlyDebt);\r\n  \r\n  // 计算最长贷款期限\r\n  const maxLoanTerm = calculateMaxLoanTerm(input);\r\n  \r\n  // 计算月供\r\n  const monthlyPayment = calculateMonthlyPayment(maxLoanAmount, maxLoanTerm);\r\n  \r\n  // 计算相关费用\r\n  const fees = calculateFees(input, maxLoanAmount);\r\n\r\n  // 基础结果\r\n  const result: LoanResult = {\r\n    maxLoanAmount,\r\n    maxLoanTerm,\r\n    monthlyPayment,\r\n    totalMonthlyDebt,\r\n    fees,\r\n  };\r\n\r\n  // 如果是转贷类型，添加转贷分析\r\n  if (input.loanType === 'refinance' && input.existingLoanBalance) {\r\n    result.refinanceAnalysis = calculateRefinanceAnalysis(input, maxLoanAmount, maxLoanTerm, fees);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// 计算总月债务\r\nconst calculateTotalMonthlyDebt = (input: LoanInput): number => {\r\n  const { existingLoanPayment, creditCardLimit } = input;\r\n  \r\n  // 信用卡额度的5%折算为最低月还款额\r\n  const creditCardMinPayment = creditCardLimit * 0.05;\r\n  \r\n  // 总月债务 = 现有贷款月还款额 + 信用卡最低还款额\r\n  return existingLoanPayment + creditCardMinPayment;\r\n};\r\n\r\nconst calculateMaxLoanAmount = (input: LoanInput, totalMonthlyDebt: number): number => {\r\n  const { userType, propertyValue, monthlyIncome, propertyType, loanType, existingLoanBalance, desiredCashout } = input;\r\n  \r\n  // 根据外籍人士抵押贷款专项计算手册确定最高 LTV\r\n  let maxLoanToValue;\r\n  \r\n  // 外籍人士适用规则\r\n  if (userType === 'expat') {\r\n    if (propertyType === 'first') {\r\n      // 首套住宅，根据房产价值确定 LTV\r\n      if (propertyValue <= 5000000) {\r\n        maxLoanToValue = 0.80; // 首套 ≤500万AED：80%\r\n      } else {\r\n        maxLoanToValue = 0.70; // 首套 >500万AED：70%\r\n      }\r\n    } else if (propertyType === 'second') {\r\n      maxLoanToValue = 0.60; // 投资房产（第二套）：60%\r\n    } else if (propertyType === 'offPlan') {\r\n      maxLoanToValue = 0.50; // 期房：50%\r\n    } else {\r\n      maxLoanToValue = 0.70; // 默认情况\r\n    }\r\n  } else {\r\n    // 本地居民适用规则（保留原来的逻辑，但实际应该根据文档更新）\r\n    maxLoanToValue = 0.80;\r\n  }\r\n  \r\n  // 月供不超过月收入的50%\r\n  const maxMonthlyPayment = monthlyIncome * 0.5 - totalMonthlyDebt;\r\n  \r\n  // 根据月供计算最大贷款金额，使用计算得出的贷款期限\r\n  const calculatedTerm = calculateMaxLoanTerm(input);\r\n  const maxLoanByIncome = maxMonthlyPayment * 12 * calculatedTerm;\r\n  \r\n  // 基于LTV的贷款额度上限\r\n  const maxLoanByLTV = propertyValue * maxLoanToValue;\r\n  \r\n  // 针对转贷计算\r\n  if (loanType === 'refinance' && existingLoanBalance) {\r\n    // 如果是转贷，需要确保新贷款金额至少覆盖现有贷款余额\r\n    // 公式：新贷款额 = Min(现有贷款余额 + 套现金额, 评估价值 × 适用LTV)\r\n    const desiredAmount = existingLoanBalance + (desiredCashout || 0);\r\n    return Math.min(desiredAmount, maxLoanByLTV, maxLoanByIncome);\r\n  }\r\n  \r\n  // 取较小值\r\n  return Math.min(maxLoanByLTV, maxLoanByIncome);\r\n};\r\n\r\nconst calculateMaxLoanTerm = (input: LoanInput): number => {\r\n  const { userType, propertyType, age } = input;\r\n  \r\n  // 按照文档规定，贷款到期时不得超过65周岁\r\n  const maxAge = userType === 'expat' ? 65 : 70; // 外籍人士最长到65岁，本地居民到70岁\r\n  \r\n  // 计算基于年龄的最大贷款期限\r\n  const maxTermByAge = Math.max(0, maxAge - age);\r\n  \r\n  // 按照文档规定，最长贷款期限为25年\r\n  const maxDocTerm = 25;\r\n  \r\n  // 取较小值，确保不超过文档中规定的最长期限\r\n  return Math.min(maxDocTerm, maxTermByAge);\r\n};\r\n\r\nconst calculateMonthlyPayment = (loanAmount: number, loanTerm: number, interestRate?: number): number => {\r\n  // 贷款期限为0时，月供设为0\r\n  if (loanTerm <= 0 || loanAmount <= 0) return 0;\r\n  \r\n  // 基准利率\r\n  const baseRate = interestRate || 0.035; // 3.5%或传入的特定利率\r\n  \r\n  // 压力测试标准：基准利率 + 2%（仅在未指定利率时使用压力测试）\r\n  const rate = interestRate ? baseRate : baseRate + 0.02; // 压力测试利率为5.5%\r\n  \r\n  const monthlyRate = rate / 12;\r\n  const numberOfPayments = loanTerm * 12;\r\n  \r\n  // 使用等额本息公式计算月供\r\n  return (\r\n    (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) /\r\n    (Math.pow(1 + monthlyRate, numberOfPayments) - 1)\r\n  );\r\n};\r\n\r\n// 计算转贷分析结果\r\nconst calculateRefinanceAnalysis = (\r\n  input: LoanInput, \r\n  newLoanAmount: number, \r\n  newLoanTerm: number,\r\n  fees: Record<string, number>\r\n): any => {\r\n  if (!input.existingLoanBalance || !input.existingLoanRate || !input.existingLoanTerm) {\r\n    return null;\r\n  }\r\n  \r\n  const { existingLoanBalance, existingLoanRate, existingLoanTerm, desiredCashout = 0, newLoanRate = 0.045 } = input;\r\n  \r\n  // 计算可套现金额\r\n  const cashoutAmount = Math.max(0, newLoanAmount - existingLoanBalance);\r\n  \r\n  // 计算当前月供\r\n  const currentMonthlyPayment = calculateMonthlyPayment(\r\n    existingLoanBalance, \r\n    existingLoanTerm, \r\n    existingLoanRate\r\n  );\r\n  \r\n  // 计算新贷款月供（使用用户指定的新贷款利率）\r\n  const newMonthlyPayment = calculateMonthlyPayment(newLoanAmount, newLoanTerm, newLoanRate);\r\n  \r\n  // 月供节省\r\n  const monthlySavings = currentMonthlyPayment - newMonthlyPayment;\r\n  \r\n  // 总节省（按照新贷款期限计算）\r\n  const totalSavings = monthlySavings * newLoanTerm * 12;\r\n  \r\n  // 总费用 - 使用类型安全的方式计算总费用\r\n  let totalFees = 0;\r\n  Object.keys(fees).forEach(key => {\r\n    const fee = fees[key];\r\n    if (typeof fee === 'number') {\r\n      totalFees += fee;\r\n    }\r\n  });\r\n  \r\n  // 净收益\r\n  const netBenefit = totalSavings - totalFees;\r\n  \r\n  // 收支平衡点（月数）\r\n  const breakEvenMonths = totalFees / monthlySavings;\r\n  \r\n  return {\r\n    cashoutAmount,\r\n    monthlySavings,\r\n    totalSavings,\r\n    netBenefit,\r\n    breakEvenMonths: Math.ceil(breakEvenMonths),\r\n  };\r\n};\r\n\r\nconst calculateFees = (input: LoanInput, loanAmount: number) => {\r\n  const { propertyValue, loanType, existingLoanBalance } = input;\r\n  \r\n  // 根据文档的费用明细规范计算费用\r\n  \r\n  // 房产评估费：固定2,500-3,000 AED\r\n  const evaluation = 3000;\r\n  \r\n  // 抵押登记费：贷款额×0.25% + 290 AED\r\n  const registration = loanAmount * 0.0025 + 290;\r\n  \r\n  // 银行手续费：贷款额×1%（封顶10,000 AED）\r\n  let bankFee = loanAmount * 0.01;\r\n  bankFee = Math.min(bankFee, 10000);\r\n  \r\n  // 基础费用对象\r\n  const fees: any = {\r\n    evaluation,\r\n    registration,\r\n    bankFee,\r\n  };\r\n  \r\n  // 根据贷款类型计算不同的费用\r\n  if (loanType === 'new') {\r\n    // 新购买：转让费为房产价值的2%\r\n    fees.transfer = propertyValue * 0.02;\r\n  } else if (loanType === 'refinance' && existingLoanBalance) {\r\n    // 转贷：转让费为房产价值的1%\r\n    fees.transfer = propertyValue * 0.01;\r\n    \r\n    // 提前还款费：现有贷款余额的1%（封顶10,000 AED）\r\n    fees.earlyRepayment = Math.min(existingLoanBalance * 0.01, 10000);\r\n    \r\n    // DLD抵押解除费：固定1,300-1,600 AED\r\n    fees.mortgageDischarge = 1500;\r\n  } else if (loanType === 'cashout') {\r\n    // 套现：转让费为房产价值的1.5%\r\n    fees.transfer = propertyValue * 0.015;\r\n  } else if (loanType === 'combined') {\r\n    // 组合贷款：转让费为房产价值的2.5%\r\n    fees.transfer = propertyValue * 0.025;\r\n  }\r\n  \r\n  return fees;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}