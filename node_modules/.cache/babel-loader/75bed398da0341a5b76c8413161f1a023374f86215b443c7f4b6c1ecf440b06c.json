{"ast":null,"code":"export const calculateLoan = input => {\n  // 计算最大贷款金额\n  const maxLoanAmount = calculateMaxLoanAmount(input);\n\n  // 计算最长贷款期限\n  const maxLoanTerm = calculateMaxLoanTerm(input);\n\n  // 计算月供\n  const monthlyPayment = calculateMonthlyPayment(maxLoanAmount, maxLoanTerm);\n\n  // 计算相关费用\n  const fees = calculateFees(input);\n  return {\n    maxLoanAmount,\n    maxLoanTerm,\n    monthlyPayment,\n    fees\n  };\n};\nconst calculateMaxLoanAmount = input => {\n  const {\n    userType,\n    propertyValue,\n    monthlyIncome,\n    existingDebt,\n    propertyType\n  } = input;\n\n  // 根据外籍人士抵押贷款专项计算手册确定最高 LTV\n  let maxLoanToValue;\n\n  // 外籍人士适用规则\n  if (userType === 'expat') {\n    if (propertyType === 'first') {\n      // 首套住宅，根据房产价值确定 LTV\n      if (propertyValue <= 5000000) {\n        maxLoanToValue = 0.80; // 首套 ≤500万AED：80%\n      } else {\n        maxLoanToValue = 0.70; // 首套 >500万AED：70%\n      }\n    } else if (propertyType === 'second') {\n      maxLoanToValue = 0.60; // 投资房产（第二套）：60%\n    } else if (propertyType === 'offPlan') {\n      maxLoanToValue = 0.50; // 期房：50%\n    } else {\n      maxLoanToValue = 0.70; // 默认情况\n    }\n  } else {\n    // 本地居民适用规则（保留原来的逻辑，但实际应该根据文档更新）\n    maxLoanToValue = 0.80;\n  }\n\n  // 月供不超过月收入的50%\n  const maxMonthlyPayment = monthlyIncome * 0.5 - existingDebt;\n\n  // 根据月供计算最大贷款金额，使用计算得出的贷款期限\n  const calculatedTerm = calculateMaxLoanTerm(input);\n  const maxLoanByIncome = maxMonthlyPayment * 12 * calculatedTerm;\n\n  // 取较小值\n  return Math.min(propertyValue * maxLoanToValue, maxLoanByIncome);\n};\nconst calculateMaxLoanTerm = input => {\n  const {\n    userType,\n    propertyType,\n    age\n  } = input;\n\n  // 按照文档规定，贷款到期时不得超过65周岁\n  const maxAge = 65; // 外籍人士最长到65岁\n\n  // 计算基于年龄的最大贷款期限\n  const maxTermByAge = Math.max(0, maxAge - age);\n\n  // 按照文档规定，最长贷款期限为25年\n  const maxDocTerm = 25;\n\n  // 取较小值，确保不超过文档中规定的最长期限\n  return Math.min(maxDocTerm, maxTermByAge);\n};\nconst calculateMonthlyPayment = (loanAmount, loanTerm) => {\n  // 贷款期限为0时，月供设为0\n  if (loanTerm <= 0 || loanAmount <= 0) return 0;\n\n  // 基准利率\n  const baseRate = 0.035; // 3.5%\n\n  // 压力测试标准：基准利率 + 2%\n  const stressRate = baseRate + 0.02; // 3.5% + 2% = 5.5%\n\n  const monthlyRate = stressRate / 12;\n  const numberOfPayments = loanTerm * 12;\n\n  // 使用等额本息公式计算月供\n  return loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n};\nconst calculateFees = input => {\n  const {\n    propertyValue,\n    loanType\n  } = input;\n\n  // 根据文档的费用明细规范计算费用\n\n  // 房产评估费：固定2,500-3,000 AED\n  const evaluation = 3000;\n\n  // 抵押登记费：贷款额×0.25% + 290 AED\n  // 由于我们还没有最终的贷款金额，这里使用估算值\n  const estimatedLoanAmount = calculateMaxLoanAmount(input);\n  const registration = estimatedLoanAmount * 0.0025 + 290;\n\n  // 银行手续费：贷款额×1%（封顶10,000 AED）\n  let bankFee = estimatedLoanAmount * 0.01;\n  bankFee = Math.min(bankFee, 10000);\n\n  // 转让费：根据文档标准应该包含在银行手续费中，但我们这里保留之前的逻辑\n  let transfer = 0;\n  switch (loanType) {\n    case 'new':\n      transfer = propertyValue * 0.02; // 2%\n      break;\n    case 'refinance':\n      transfer = propertyValue * 0.01; // 1%\n      break;\n    case 'cashout':\n      transfer = propertyValue * 0.015; // 1.5%\n      break;\n    case 'combined':\n      transfer = propertyValue * 0.025; // 2.5%\n      break;\n  }\n  return {\n    evaluation,\n    registration,\n    transfer,\n    bankFee\n  };\n};","map":{"version":3,"names":["calculateLoan","input","maxLoanAmount","calculateMaxLoanAmount","maxLoanTerm","calculateMaxLoanTerm","monthlyPayment","calculateMonthlyPayment","fees","calculateFees","userType","propertyValue","monthlyIncome","existingDebt","propertyType","maxLoanToValue","maxMonthlyPayment","calculatedTerm","maxLoanByIncome","Math","min","age","maxAge","maxTermByAge","max","maxDocTerm","loanAmount","loanTerm","baseRate","stressRate","monthlyRate","numberOfPayments","pow","loanType","evaluation","estimatedLoanAmount","registration","bankFee","transfer"],"sources":["E:/Loan/LoanCalculatorV2/src/utils/loanCalculator.ts"],"sourcesContent":["export interface LoanInput {\r\n  userType: 'local' | 'expat';\r\n  propertyValue: number;\r\n  propertyType: 'first' | 'second' | 'offPlan';\r\n  monthlyIncome: number;\r\n  existingDebt: number;\r\n  loanType: 'new' | 'refinance' | 'cashout' | 'combined';\r\n  age: number;\r\n}\r\n\r\nexport interface LoanResult {\r\n  maxLoanAmount: number;\r\n  maxLoanTerm: number;\r\n  monthlyPayment: number;\r\n  fees: {\r\n    evaluation: number;\r\n    registration: number;\r\n    transfer: number;\r\n    bankFee: number;\r\n  };\r\n}\r\n\r\nexport const calculateLoan = (input: LoanInput): LoanResult => {\r\n  // 计算最大贷款金额\r\n  const maxLoanAmount = calculateMaxLoanAmount(input);\r\n  \r\n  // 计算最长贷款期限\r\n  const maxLoanTerm = calculateMaxLoanTerm(input);\r\n  \r\n  // 计算月供\r\n  const monthlyPayment = calculateMonthlyPayment(maxLoanAmount, maxLoanTerm);\r\n  \r\n  // 计算相关费用\r\n  const fees = calculateFees(input);\r\n\r\n  return {\r\n    maxLoanAmount,\r\n    maxLoanTerm,\r\n    monthlyPayment,\r\n    fees,\r\n  };\r\n};\r\n\r\nconst calculateMaxLoanAmount = (input: LoanInput): number => {\r\n  const { userType, propertyValue, monthlyIncome, existingDebt, propertyType } = input;\r\n  \r\n  // 根据外籍人士抵押贷款专项计算手册确定最高 LTV\r\n  let maxLoanToValue;\r\n  \r\n  // 外籍人士适用规则\r\n  if (userType === 'expat') {\r\n    if (propertyType === 'first') {\r\n      // 首套住宅，根据房产价值确定 LTV\r\n      if (propertyValue <= 5000000) {\r\n        maxLoanToValue = 0.80; // 首套 ≤500万AED：80%\r\n      } else {\r\n        maxLoanToValue = 0.70; // 首套 >500万AED：70%\r\n      }\r\n    } else if (propertyType === 'second') {\r\n      maxLoanToValue = 0.60; // 投资房产（第二套）：60%\r\n    } else if (propertyType === 'offPlan') {\r\n      maxLoanToValue = 0.50; // 期房：50%\r\n    } else {\r\n      maxLoanToValue = 0.70; // 默认情况\r\n    }\r\n  } else {\r\n    // 本地居民适用规则（保留原来的逻辑，但实际应该根据文档更新）\r\n    maxLoanToValue = 0.80;\r\n  }\r\n  \r\n  // 月供不超过月收入的50%\r\n  const maxMonthlyPayment = monthlyIncome * 0.5 - existingDebt;\r\n  \r\n  // 根据月供计算最大贷款金额，使用计算得出的贷款期限\r\n  const calculatedTerm = calculateMaxLoanTerm(input);\r\n  const maxLoanByIncome = maxMonthlyPayment * 12 * calculatedTerm;\r\n  \r\n  // 取较小值\r\n  return Math.min(propertyValue * maxLoanToValue, maxLoanByIncome);\r\n};\r\n\r\nconst calculateMaxLoanTerm = (input: LoanInput): number => {\r\n  const { userType, propertyType, age } = input;\r\n  \r\n  // 按照文档规定，贷款到期时不得超过65周岁\r\n  const maxAge = 65; // 外籍人士最长到65岁\r\n  \r\n  // 计算基于年龄的最大贷款期限\r\n  const maxTermByAge = Math.max(0, maxAge - age);\r\n  \r\n  // 按照文档规定，最长贷款期限为25年\r\n  const maxDocTerm = 25;\r\n  \r\n  // 取较小值，确保不超过文档中规定的最长期限\r\n  return Math.min(maxDocTerm, maxTermByAge);\r\n};\r\n\r\nconst calculateMonthlyPayment = (loanAmount: number, loanTerm: number): number => {\r\n  // 贷款期限为0时，月供设为0\r\n  if (loanTerm <= 0 || loanAmount <= 0) return 0;\r\n  \r\n  // 基准利率\r\n  const baseRate = 0.035; // 3.5%\r\n  \r\n  // 压力测试标准：基准利率 + 2%\r\n  const stressRate = baseRate + 0.02; // 3.5% + 2% = 5.5%\r\n  \r\n  const monthlyRate = stressRate / 12;\r\n  const numberOfPayments = loanTerm * 12;\r\n  \r\n  // 使用等额本息公式计算月供\r\n  return (\r\n    (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) /\r\n    (Math.pow(1 + monthlyRate, numberOfPayments) - 1)\r\n  );\r\n};\r\n\r\nconst calculateFees = (input: LoanInput) => {\r\n  const { propertyValue, loanType } = input;\r\n  \r\n  // 根据文档的费用明细规范计算费用\r\n  \r\n  // 房产评估费：固定2,500-3,000 AED\r\n  const evaluation = 3000;\r\n  \r\n  // 抵押登记费：贷款额×0.25% + 290 AED\r\n  // 由于我们还没有最终的贷款金额，这里使用估算值\r\n  const estimatedLoanAmount = calculateMaxLoanAmount(input);\r\n  const registration = estimatedLoanAmount * 0.0025 + 290;\r\n  \r\n  // 银行手续费：贷款额×1%（封顶10,000 AED）\r\n  let bankFee = estimatedLoanAmount * 0.01;\r\n  bankFee = Math.min(bankFee, 10000);\r\n  \r\n  // 转让费：根据文档标准应该包含在银行手续费中，但我们这里保留之前的逻辑\r\n  let transfer = 0;\r\n  switch (loanType) {\r\n    case 'new':\r\n      transfer = propertyValue * 0.02; // 2%\r\n      break;\r\n    case 'refinance':\r\n      transfer = propertyValue * 0.01; // 1%\r\n      break;\r\n    case 'cashout':\r\n      transfer = propertyValue * 0.015; // 1.5%\r\n      break;\r\n    case 'combined':\r\n      transfer = propertyValue * 0.025; // 2.5%\r\n      break;\r\n  }\r\n  \r\n  return {\r\n    evaluation,\r\n    registration,\r\n    transfer,\r\n    bankFee,\r\n  };\r\n}; "],"mappings":"AAsBA,OAAO,MAAMA,aAAa,GAAIC,KAAgB,IAAiB;EAC7D;EACA,MAAMC,aAAa,GAAGC,sBAAsB,CAACF,KAAK,CAAC;;EAEnD;EACA,MAAMG,WAAW,GAAGC,oBAAoB,CAACJ,KAAK,CAAC;;EAE/C;EACA,MAAMK,cAAc,GAAGC,uBAAuB,CAACL,aAAa,EAAEE,WAAW,CAAC;;EAE1E;EACA,MAAMI,IAAI,GAAGC,aAAa,CAACR,KAAK,CAAC;EAEjC,OAAO;IACLC,aAAa;IACbE,WAAW;IACXE,cAAc;IACdE;EACF,CAAC;AACH,CAAC;AAED,MAAML,sBAAsB,GAAIF,KAAgB,IAAa;EAC3D,MAAM;IAAES,QAAQ;IAAEC,aAAa;IAAEC,aAAa;IAAEC,YAAY;IAAEC;EAAa,CAAC,GAAGb,KAAK;;EAEpF;EACA,IAAIc,cAAc;;EAElB;EACA,IAAIL,QAAQ,KAAK,OAAO,EAAE;IACxB,IAAII,YAAY,KAAK,OAAO,EAAE;MAC5B;MACA,IAAIH,aAAa,IAAI,OAAO,EAAE;QAC5BI,cAAc,GAAG,IAAI,CAAC,CAAC;MACzB,CAAC,MAAM;QACLA,cAAc,GAAG,IAAI,CAAC,CAAC;MACzB;IACF,CAAC,MAAM,IAAID,YAAY,KAAK,QAAQ,EAAE;MACpCC,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM,IAAID,YAAY,KAAK,SAAS,EAAE;MACrCC,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM;MACLA,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB;EACF,CAAC,MAAM;IACL;IACAA,cAAc,GAAG,IAAI;EACvB;;EAEA;EACA,MAAMC,iBAAiB,GAAGJ,aAAa,GAAG,GAAG,GAAGC,YAAY;;EAE5D;EACA,MAAMI,cAAc,GAAGZ,oBAAoB,CAACJ,KAAK,CAAC;EAClD,MAAMiB,eAAe,GAAGF,iBAAiB,GAAG,EAAE,GAAGC,cAAc;;EAE/D;EACA,OAAOE,IAAI,CAACC,GAAG,CAACT,aAAa,GAAGI,cAAc,EAAEG,eAAe,CAAC;AAClE,CAAC;AAED,MAAMb,oBAAoB,GAAIJ,KAAgB,IAAa;EACzD,MAAM;IAAES,QAAQ;IAAEI,YAAY;IAAEO;EAAI,CAAC,GAAGpB,KAAK;;EAE7C;EACA,MAAMqB,MAAM,GAAG,EAAE,CAAC,CAAC;;EAEnB;EACA,MAAMC,YAAY,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEF,MAAM,GAAGD,GAAG,CAAC;;EAE9C;EACA,MAAMI,UAAU,GAAG,EAAE;;EAErB;EACA,OAAON,IAAI,CAACC,GAAG,CAACK,UAAU,EAAEF,YAAY,CAAC;AAC3C,CAAC;AAED,MAAMhB,uBAAuB,GAAGA,CAACmB,UAAkB,EAAEC,QAAgB,KAAa;EAChF;EACA,IAAIA,QAAQ,IAAI,CAAC,IAAID,UAAU,IAAI,CAAC,EAAE,OAAO,CAAC;;EAE9C;EACA,MAAME,QAAQ,GAAG,KAAK,CAAC,CAAC;;EAExB;EACA,MAAMC,UAAU,GAAGD,QAAQ,GAAG,IAAI,CAAC,CAAC;;EAEpC,MAAME,WAAW,GAAGD,UAAU,GAAG,EAAE;EACnC,MAAME,gBAAgB,GAAGJ,QAAQ,GAAG,EAAE;;EAEtC;EACA,OACGD,UAAU,GAAGI,WAAW,GAAGX,IAAI,CAACa,GAAG,CAAC,CAAC,GAAGF,WAAW,EAAEC,gBAAgB,CAAC,IACtEZ,IAAI,CAACa,GAAG,CAAC,CAAC,GAAGF,WAAW,EAAEC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAErD,CAAC;AAED,MAAMtB,aAAa,GAAIR,KAAgB,IAAK;EAC1C,MAAM;IAAEU,aAAa;IAAEsB;EAAS,CAAC,GAAGhC,KAAK;;EAEzC;;EAEA;EACA,MAAMiC,UAAU,GAAG,IAAI;;EAEvB;EACA;EACA,MAAMC,mBAAmB,GAAGhC,sBAAsB,CAACF,KAAK,CAAC;EACzD,MAAMmC,YAAY,GAAGD,mBAAmB,GAAG,MAAM,GAAG,GAAG;;EAEvD;EACA,IAAIE,OAAO,GAAGF,mBAAmB,GAAG,IAAI;EACxCE,OAAO,GAAGlB,IAAI,CAACC,GAAG,CAACiB,OAAO,EAAE,KAAK,CAAC;;EAElC;EACA,IAAIC,QAAQ,GAAG,CAAC;EAChB,QAAQL,QAAQ;IACd,KAAK,KAAK;MACRK,QAAQ,GAAG3B,aAAa,GAAG,IAAI,CAAC,CAAC;MACjC;IACF,KAAK,WAAW;MACd2B,QAAQ,GAAG3B,aAAa,GAAG,IAAI,CAAC,CAAC;MACjC;IACF,KAAK,SAAS;MACZ2B,QAAQ,GAAG3B,aAAa,GAAG,KAAK,CAAC,CAAC;MAClC;IACF,KAAK,UAAU;MACb2B,QAAQ,GAAG3B,aAAa,GAAG,KAAK,CAAC,CAAC;MAClC;EACJ;EAEA,OAAO;IACLuB,UAAU;IACVE,YAAY;IACZE,QAAQ;IACRD;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}